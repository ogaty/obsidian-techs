(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{326:function(e,n,s){"use strict";s.r(n);var o=s(19),a=Object(o.a)({},(function(){var e=this._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"eslint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[this._v("#")]),this._v(" eslint")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm init @eslint\n")])])]),e("p",[this._v(".eslintrc.json")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('{\n    // [JSON]\n    //\n    // An .eslintrc starter file with all rules (set to 0) and envs (set to false) listed.\n    // Other options (although by no means comprehensive) are either set to false or else commented out.\n    //\n    // Updated on 2017-12-16.\n    //\n    // Starter file generated by ESLint Starter File Generator:\n    //     https://github.com/i-ron-y/eslint-starter-generator\n    //\n    // ESLint docs -- Configuring ESLint:      https://eslint.org/docs/user-guide/configuring\n    // ESLint docs -- List of available rules: https://eslint.org/docs/rules/\n\n\n    "parserOptions": {\n\n        // "ecmaVersion": 5,                       // set to 3, 5 (default), 6, 7, or 8 to specify the version of ECMAScript syntax you want to use.\n        //                                         // You can also set to 2015 (same as 6), 2016 (same as 7), or 2017 (same as 8) to use the year-based naming.\n\n        // "sourceType": "script",                 // set to "script" (default) or "module" if your code is in ECMAScript modules.\n\n        "ecmaFeatures": {\n\n            "globalReturn": false,              // allow return statements in the global scope\n            "impliedStrict": false,             // enable global strict mode (if ecmaVersion is 5 or greater)\n            "jsx": false,                       // enable JSX\n\n            "experimentalObjectRestSpread": false   // enable support for the experimental object rest/spread properties\n            // (IMPORTANT: This is an experimental feature that may change significantly in the future.\n            // It�s recommended that you do not write rules relying on this functionality unless you are\n            // willing to incur maintenance cost when it changes.)\n\n        }\n\n    },\n\n\n    // "parser": "espree",                         // compatible parsers: "espree" (default), "esprima", "babel-eslint", and "typescript-eslint-parser" (experimental)\n\n\n    "env": {\n\n        "browser": false,                       // browser global variables\n        "node": false,                          // Node.js global variables and Node.js scoping.\n        "commonjs": false,                      // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).\n        "shared-node-browser": false,           // Globals common to both Node and Browser.\n        "es6": false,                           // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6).\n        "worker": false,                        // web workers global variables.\n        "amd": false,                           // defines require() and define() as global variables as per the amd spec\n        "mocha": false,                         // adds all of the Mocha testing global variables\n        "jasmine": false,                       // adds all of the Jasmine testing global variables for version 1.3 and 2.0\n        "jest": false,                          // Jest global variables.\n        "phantomjs": false,                     // PhantomJS global variables\n        "protractor": false,                    // Protractor global variables\n        "qunit": false,                         // QUnit global variables.\n        "jquery": false,                        // jQuery global variables\n        "prototypejs": false,                   // Prototype.js global variables\n        "shelljs": false,                       // ShellJS global variables\n        "meteor": false,                        // Meteor global variables.\n        "mongo": false,                         // MongoDB global variables.\n        "applescript": false,                   // AppleScript global variables.\n        "nashorn": false,                       // Java 8 Nashorn global variables.\n        "serviceworker": false,                 // Service Worker global variables.\n        "atomtest": false,                      // Atom test helper globals.\n        "embertest": false,                     // Ember test helper globals.\n        "webextensions": false,                 // WebExtensions globals.\n        "greasemonkey": false                   // GreaseMonkey globals.\n\n    },\n\n\n    "globals": {\n\n        // e.g. "angular": true\n\n    },\n\n\n    "plugins": [\n\n        // e.g. "react" (must run `npm install eslint-plugin-react` first)\n\n    ],\n\n\n    "extends": [\n\n        // "eslint:recommended"                    // enables a subset of core rules that report common problems, which have a check mark on the rules page\n        // "eslint:all"                            // enable all core rules in the currently installed version of ESLint\n\n    ],\n\n\n    "rules": {\n\n        // Usage:\n        //    "off" or 0 - turn the rule off\n        //    "warn" or 1 - turn the rule on as a warning (doesn�t affect exit code)\n        //    "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)\n        //\n        //    If a rule has additional options, you can specify them using array literal syntax, such as:\n        //        "quotes": [2, "double"]\n\n\n        //////// Possible Errors ////////\n\n        "for-direction": 0,                     // enforce �for� loop update clause moving the counter in the right direction.\n        "getter-return": 0,                     // enforce return statements in getters\n        "no-await-in-loop": 0,                  // disallow await inside of loops\n        "no-compare-neg-zero": 0,               // disallow comparing against -0\n        "no-cond-assign": 0,                    // disallow assignment operators in conditional expressions\n        "no-console": 0,                        // disallow the use of console\n        "no-constant-condition": 0,             // disallow constant expressions in conditions\n        "no-control-regex": 0,                  // disallow control characters in regular expressions\n        "no-debugger": 0,                       // disallow the use of debugger\n        "no-dupe-args": 0,                      // disallow duplicate arguments in function definitions\n        "no-dupe-keys": 0,                      // disallow duplicate keys in object literals\n        "no-duplicate-case": 0,                 // disallow duplicate case labels\n        "no-empty": 0,                          // disallow empty block statements\n        "no-empty-character-class": 0,          // disallow empty character classes in regular expressions\n        "no-ex-assign": 0,                      // disallow reassigning exceptions in catch clauses\n        "no-extra-boolean-cast": 0,             // disallow unnecessary boolean casts\n        "no-extra-parens": 0,                   // disallow unnecessary parentheses\n        "no-extra-semi": 0,                     // disallow unnecessary semicolons\n        "no-func-assign": 0,                    // disallow reassigning function declarations\n        "no-inner-declarations": 0,             // disallow variable or function declarations in nested blocks\n        "no-invalid-regexp": 0,                 // disallow invalid regular expression strings in RegExp constructors\n        "no-irregular-whitespace": 0,           // disallow irregular whitespace outside of strings and comments\n        "no-obj-calls": 0,                      // disallow calling global object properties as functions\n        "no-prototype-builtins": 0,             // disallow calling some Object.prototype methods directly on objects\n        "no-regex-spaces": 0,                   // disallow multiple spaces in regular expressions\n        "no-sparse-arrays": 0,                  // disallow sparse arrays\n        "no-template-curly-in-string": 0,       // disallow template literal placeholder syntax in regular strings\n        "no-unexpected-multiline": 0,           // disallow confusing multiline expressions\n        "no-unreachable": 0,                    // disallow unreachable code after return, throw, continue, and break statements\n        "no-unsafe-finally": 0,                 // disallow control flow statements in finally blocks\n        "no-unsafe-negation": 0,                // disallow negating the left operand of relational operators\n        "use-isnan": 0,                         // require calls to isNaN() when checking for NaN\n        "valid-jsdoc": 0,                       // enforce valid JSDoc comments\n        "valid-typeof": 0,                      // enforce comparing typeof expressions against valid strings\n\n\n        //////// Best Practices ////////\n\n        "accessor-pairs": 0,                    // enforce getter and setter pairs in objects\n        "array-callback-return": 0,             // enforce return statements in callbacks of array methods\n        "block-scoped-var": 0,                  // enforce the use of variables within the scope they are defined\n        "class-methods-use-this": 0,            // enforce that class methods utilize this\n        "complexity": 0,                        // enforce a maximum cyclomatic complexity allowed in a program\n        "consistent-return": 0,                 // require return statements to either always or never specify values\n        "curly": 0,                             // enforce consistent brace style for all control statements\n        "default-case": 0,                      // require default cases in switch statements\n        "dot-location": 0,                      // enforce consistent newlines before and after dots\n        "dot-notation": 0,                      // enforce dot notation whenever possible\n        "eqeqeq": 0,                            // require the use of === and !==\n        "guard-for-in": 0,                      // require for-in loops to include an if statement\n        "no-alert": 0,                          // disallow the use of alert, confirm, and prompt\n        "no-caller": 0,                         // disallow the use of arguments.caller or arguments.callee\n        "no-case-declarations": 0,              // disallow lexical declarations in case clauses\n        "no-div-regex": 0,                      // disallow division operators explicitly at the beginning of regular expressions\n        "no-else-return": 0,                    // disallow else blocks after return statements in if statements\n        "no-empty-function": 0,                 // disallow empty functions\n        "no-empty-pattern": 0,                  // disallow empty destructuring patterns\n        "no-eq-null": 0,                        // disallow null comparisons without type-checking operators\n        "no-eval": 0,                           // disallow the use of eval()\n        "no-extend-native": 0,                  // disallow extending native types\n        "no-extra-bind": 0,                     // disallow unnecessary calls to .bind()\n        "no-extra-label": 0,                    // disallow unnecessary labels\n        "no-fallthrough": 0,                    // disallow fallthrough of case statements\n        "no-floating-decimal": 0,               // disallow leading or trailing decimal points in numeric literals\n        "no-global-assign": 0,                  // disallow assignments to native objects or read-only global variables\n        "no-implicit-coercion": 0,              // disallow shorthand type conversions\n        "no-implicit-globals": 0,               // disallow variable and function declarations in the global scope\n        "no-implied-eval": 0,                   // disallow the use of eval()-like methods\n        "no-invalid-this": 0,                   // disallow this keywords outside of classes or class-like objects\n        "no-iterator": 0,                       // disallow the use of the __iterator__ property\n        "no-labels": 0,                         // disallow labeled statements\n        "no-lone-blocks": 0,                    // disallow unnecessary nested blocks\n        "no-loop-func": 0,                      // disallow function declarations and expressions inside loop statements\n        "no-magic-numbers": 0,                  // disallow magic numbers\n        "no-multi-spaces": 0,                   // disallow multiple spaces\n        "no-multi-str": 0,                      // disallow multiline strings\n        "no-new": 0,                            // disallow new operators outside of assignments or comparisons\n        "no-new-func": 0,                       // disallow new operators with the Function object\n        "no-new-wrappers": 0,                   // disallow new operators with the String, Number, and Boolean objects\n        "no-octal": 0,                          // disallow octal literals\n        "no-octal-escape": 0,                   // disallow octal escape sequences in string literals\n        "no-param-reassign": 0,                 // disallow reassigning function parameters\n        "no-proto": 0,                          // disallow the use of the __proto__ property\n        "no-redeclare": 0,                      // disallow variable redeclaration\n        "no-restricted-properties": 0,          // disallow certain properties on certain objects\n        "no-return-assign": 0,                  // disallow assignment operators in return statements\n        "no-return-await": 0,                   // disallow unnecessary return await\n        "no-script-url": 0,                     // disallow javascript: urls\n        "no-self-assign": 0,                    // disallow assignments where both sides are exactly the same\n        "no-self-compare": 0,                   // disallow comparisons where both sides are exactly the same\n        "no-sequences": 0,                      // disallow comma operators\n        "no-throw-literal": 0,                  // disallow throwing literals as exceptions\n        "no-unmodified-loop-condition": 0,      // disallow unmodified loop conditions\n        "no-unused-expressions": 0,             // disallow unused expressions\n        "no-unused-labels": 0,                  // disallow unused labels\n        "no-useless-call": 0,                   // disallow unnecessary calls to .call() and .apply()\n        "no-useless-concat": 0,                 // disallow unnecessary concatenation of literals or template literals\n        "no-useless-escape": 0,                 // disallow unnecessary escape characters\n        "no-useless-return": 0,                 // disallow redundant return statements\n        "no-void": 0,                           // disallow void operators\n        "no-warning-comments": 0,               // disallow specified warning terms in comments\n        "no-with": 0,                           // disallow with statements\n        "prefer-promise-reject-errors": 0,      // require using Error objects as Promise rejection reasons\n        "radix": 0,                             // enforce the consistent use of the radix argument when using parseInt()\n        "require-await": 0,                     // disallow async functions which have no await expression\n        "vars-on-top": 0,                       // require var declarations be placed at the top of their containing scope\n        "wrap-iife": 0,                         // require parentheses around immediate function invocations\n        "yoda": 0,                              // require or disallow �Yoda� conditions\n\n\n        //////// Strict Mode ////////\n\n        "strict": 0,                            // require or disallow strict mode directives\n\n\n        //////// Variables ////////\n\n        "init-declarations": 0,                 // require or disallow initialization in variable declarations\n        "no-catch-shadow": 0,                   // disallow catch clause parameters from shadowing variables in the outer scope\n        "no-delete-var": 0,                     // disallow deleting variables\n        "no-label-var": 0,                      // disallow labels that share a name with a variable\n        "no-restricted-globals": 0,             // disallow specified global variables\n        "no-shadow": 0,                         // disallow variable declarations from shadowing variables declared in the outer scope\n        "no-shadow-restricted-names": 0,        // disallow identifiers from shadowing restricted names\n        "no-undef": 0,                          // disallow the use of undeclared variables unless mentioned in /*global */ comments\n        "no-undef-init": 0,                     // disallow initializing variables to undefined\n        "no-undefined": 0,                      // disallow the use of undefined as an identifier\n        "no-unused-vars": 0,                    // disallow unused variables\n        "no-use-before-define": 0,              // disallow the use of variables before they are defined\n\n\n        //////// Node.js and CommonJS ////////\n\n        "callback-return": 0,                   // require return statements after callbacks\n        "global-require": 0,                    // require require() calls to be placed at top-level module scope\n        "handle-callback-err": 0,               // require error handling in callbacks\n        "no-buffer-constructor": 0,             // disallow use of the Buffer() constructor\n        "no-mixed-requires": 0,                 // disallow require calls to be mixed with regular variable declarations\n        "no-new-require": 0,                    // disallow new operators with calls to require\n        "no-path-concat": 0,                    // disallow string concatenation with __dirname and __filename\n        "no-process-env": 0,                    // disallow the use of process.env\n        "no-process-exit": 0,                   // disallow the use of process.exit()\n        "no-restricted-modules": 0,             // disallow specified modules when loaded by require\n        "no-sync": 0,                           // disallow synchronous methods\n\n\n        //////// Stylistic Issues ////////\n\n        "array-bracket-newline": 0,             // enforce linebreaks after opening and before closing array brackets\n        "array-bracket-spacing": 0,             // enforce consistent spacing inside array brackets\n        "array-element-newline": 0,             // enforce line breaks after each array element\n        "block-spacing": 0,                     // disallow or enforce spaces inside of blocks after opening block and before closing block\n        "brace-style": 0,                       // enforce consistent brace style for blocks\n        "camelcase": 0,                         // enforce camelcase naming convention\n        "capitalized-comments": 0,              // enforce or disallow capitalization of the first letter of a comment\n        "comma-dangle": 0,                      // require or disallow trailing commas\n        "comma-spacing": 0,                     // enforce consistent spacing before and after commas\n        "comma-style": 0,                       // enforce consistent comma style\n        "computed-property-spacing": 0,         // enforce consistent spacing inside computed property brackets\n        "consistent-this": 0,                   // enforce consistent naming when capturing the current execution context\n        "eol-last": 0,                          // require or disallow newline at the end of files\n        "func-call-spacing": 0,                 // require or disallow spacing between function identifiers and their invocations\n        "func-name-matching": 0,                // require function names to match the name of the variable or property to which they are assigned\n        "func-names": 0,                        // require or disallow named function expressions\n        "func-style": 0,                        // enforce the consistent use of either function declarations or expressions\n        "function-paren-newline": 0,            // enforce consistent line breaks inside function parentheses\n        "id-blacklist": 0,                      // disallow specified identifiers\n        "id-length": 0,                         // enforce minimum and maximum identifier lengths\n        "id-match": 0,                          // require identifiers to match a specified regular expression\n        "implicit-arrow-linebreak": 0,          // enforce the location of arrow function bodies\n        "indent": 0,                            // enforce consistent indentation\n        "jsx-quotes": 0,                        // enforce the consistent use of either double or single quotes in JSX attributes\n        "key-spacing": 0,                       // enforce consistent spacing between keys and values in object literal properties\n        "keyword-spacing": 0,                   // enforce consistent spacing before and after keywords\n        "line-comment-position": 0,             // enforce position of line comments\n        "linebreak-style": 0,                   // enforce consistent linebreak style\n        "lines-around-comment": 0,              // require empty lines around comments\n        "lines-between-class-members": 0,       // require or disallow an empty line between class members\n        "max-depth": 0,                         // enforce a maximum depth that blocks can be nested\n        "max-len": 0,                           // enforce a maximum line length\n        "max-lines": 0,                         // enforce a maximum number of lines per file\n        "max-nested-callbacks": 0,              // enforce a maximum depth that callbacks can be nested\n        "max-params": 0,                        // enforce a maximum number of parameters in function definitions\n        "max-statements": 0,                    // enforce a maximum number of statements allowed in function blocks\n        "max-statements-per-line": 0,           // enforce a maximum number of statements allowed per line\n        "multiline-comment-style": 0,           // enforce a particular style for multiline comments\n        "multiline-ternary": 0,                 // enforce newlines between operands of ternary expressions\n        "new-cap": 0,                           // require constructor names to begin with a capital letter\n        "new-parens": 0,                        // require parentheses when invoking a constructor with no arguments\n        "newline-per-chained-call": 0,          // require a newline after each call in a method chain\n        "no-array-constructor": 0,              // disallow Array constructors\n        "no-bitwise": 0,                        // disallow bitwise operators\n        "no-continue": 0,                       // disallow continue statements\n        "no-inline-comments": 0,                // disallow inline comments after code\n        "no-lonely-if": 0,                      // disallow if statements as the only statement in else blocks\n        "no-mixed-operators": 0,                // disallow mixed binary operators\n        "no-mixed-spaces-and-tabs": 0,          // disallow mixed spaces and tabs for indentation\n        "no-multi-assign": 0,                   // disallow use of chained assignment expressions\n        "no-multiple-empty-lines": 0,           // disallow multiple empty lines\n        "no-negated-condition": 0,              // disallow negated conditions\n        "no-nested-ternary": 0,                 // disallow nested ternary expressions\n        "no-new-object": 0,                     // disallow Object constructors\n        "no-plusplus": 0,                       // disallow the unary operators ++ and --\n        "no-restricted-syntax": 0,              // disallow specified syntax\n        "no-tabs": 0,                           // disallow all tabs\n        "no-ternary": 0,                        // disallow ternary operators\n        "no-trailing-spaces": 0,                // disallow trailing whitespace at the end of lines\n        "no-underscore-dangle": 0,              // disallow dangling underscores in identifiers\n        "no-unneeded-ternary": 0,               // disallow ternary operators when simpler alternatives exist\n        "no-whitespace-before-property": 0,     // disallow whitespace before properties\n        "nonblock-statement-body-position": 0,  // enforce the location of single-line statements\n        "object-curly-newline": 0,              // enforce consistent line breaks inside braces\n        "object-curly-spacing": 0,              // enforce consistent spacing inside braces\n        "object-property-newline": 0,           // enforce placing object properties on separate lines\n        "one-var": 0,                           // enforce variables to be declared either together or separately in functions\n        "one-var-declaration-per-line": 0,      // require or disallow newlines around variable declarations\n        "operator-assignment": 0,               // require or disallow assignment operator shorthand where possible\n        "operator-linebreak": 0,                // enforce consistent linebreak style for operators\n        "padded-blocks": 0,                     // require or disallow padding within blocks\n        "padding-line-between-statements": 0,   // require or disallow padding lines between statements\n        "quote-props": 0,                       // require quotes around object literal property names\n        "quotes": 0,                            // enforce the consistent use of either backticks, double, or single quotes\n        "require-jsdoc": 0,                     // require JSDoc comments\n        "semi": 0,                              // require or disallow semicolons instead of ASI\n        "semi-spacing": 0,                      // enforce consistent spacing before and after semicolons\n        "semi-style": 0,                        // enforce location of semicolons\n        "sort-keys": 0,                         // require object keys to be sorted\n        "sort-vars": 0,                         // require variables within the same declaration block to be sorted\n        "space-before-blocks": 0,               // enforce consistent spacing before blocks\n        "space-before-function-paren": 0,       // enforce consistent spacing before function definition opening parenthesis\n        "space-in-parens": 0,                   // enforce consistent spacing inside parentheses\n        "space-infix-ops": 0,                   // require spacing around infix operators\n        "space-unary-ops": 0,                   // enforce consistent spacing before or after unary operators\n        "spaced-comment": 0,                    // enforce consistent spacing after the // or /* in a comment\n        "switch-colon-spacing": 0,              // enforce spacing around colons of switch statements\n        "template-tag-spacing": 0,              // require or disallow spacing between template tags and their literals\n        "unicode-bom": 0,                       // require or disallow Unicode byte order mark (BOM)\n        "wrap-regex": 0,                        // require parenthesis around regex literals\n\n\n        //////// ECMAScript 6 ////////\n\n        "arrow-body-style": 0,                  // require braces around arrow function bodies\n        "arrow-parens": 0,                      // require parentheses around arrow function arguments\n        "arrow-spacing": 0,                     // enforce consistent spacing before and after the arrow in arrow functions\n        "constructor-super": 0,                 // require super() calls in constructors\n        "generator-star-spacing": 0,            // enforce consistent spacing around * operators in generator functions\n        "no-class-assign": 0,                   // disallow reassigning class members\n        "no-confusing-arrow": 0,                // disallow arrow functions where they could be confused with comparisons\n        "no-const-assign": 0,                   // disallow reassigning const variables\n        "no-dupe-class-members": 0,             // disallow duplicate class members\n        "no-duplicate-imports": 0,              // disallow duplicate module imports\n        "no-new-symbol": 0,                     // disallow new operators with the Symbol object\n        "no-restricted-imports": 0,             // disallow specified modules when loaded by import\n        "no-this-before-super": 0,              // disallow this/super before calling super() in constructors\n        "no-useless-computed-key": 0,           // disallow unnecessary computed property keys in object literals\n        "no-useless-constructor": 0,            // disallow unnecessary constructors\n        "no-useless-rename": 0,                 // disallow renaming import, export, and destructured assignments to the same name\n        "no-var": 0,                            // require let or const instead of var\n        "object-shorthand": 0,                  // require or disallow method and property shorthand syntax for object literals\n        "prefer-arrow-callback": 0,             // require using arrow functions for callbacks\n        "prefer-const": 0,                      // require const declarations for variables that are never reassigned after declared\n        "prefer-destructuring": 0,              // require destructuring from arrays and/or objects\n        "prefer-numeric-literals": 0,           // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals\n        "prefer-rest-params": 0,                // require rest parameters instead of arguments\n        "prefer-spread": 0,                     // require spread operators instead of .apply()\n        "prefer-template": 0,                   // require template literals instead of string concatenation\n        "require-yield": 0,                     // require generator functions to contain yield\n        "rest-spread-spacing": 0,               // enforce spacing between rest and spread operators and their expressions\n        "sort-imports": 0,                      // enforce sorted import declarations within modules\n        "symbol-description": 0,                // require symbol descriptions\n        "template-curly-spacing": 0,            // require or disallow spacing around embedded expressions of template strings\n        "yield-star-spacing": 0                 // require or disallow spacing around the * in yield* expressions\n\n\n    }\n\n}\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);